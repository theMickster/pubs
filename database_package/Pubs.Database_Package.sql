/*
    Target database:    Pubs (configurable)
    Target instance:    (any)
    Generated date:     12/10/2019 8:05:31 PM
    Generated on:       OBIWANKENOBI
    Package version:    (undefined)
    Migration version:  (n/a)
    Baseline version:   (n/a)
    SQL Change Automation version:  4.1.19336.13817
    Migrations pending: (variable)

    IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

    BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

    This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however
    it can also be run manually using SQL Management Studio.

    It was generated by the SQL Change Automation build task and contains logic to deploy the database, ensuring that
    each of the incremental migrations is executed a single time only in alphabetical (filename)
    order. If any errors occur within those scripts, the deployment will be aborted and the transaction
    rolled-back.

    NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
          add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files.
          However if you require transaction handling in your Pre/Post-Deployment scripts, you will
          need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
---- This script is designed to be called by SQLCMD.EXE with variables specified on the command line.
---- However you can also run it in SQL Management Studio by uncommenting this section (CTRL+K, CTRL+U).
--:setvar DatabaseName "Pubs"
--:setvar ReleaseVersion ""
--:setvar ForceDeployWithoutBaseline "False"
--:setvar DefaultFilePrefix "Pubs"
--:setvar DefaultDataPath ""
--:setvar DefaultLogPath ""
--:setvar DefaultBackupPath ""
--:setvar DeployPath ""
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion "(undefined)"
:setvar IsShadowDeployment 0

GO
:setvar IsSqlCmdEnabled "True"
GO

IF N'$(DatabaseName)' = N'$' + N'(DatabaseName)' OR
   N'$(ReleaseVersion)' = N'$' + N'(ReleaseVersion)' OR
   N'$(ForceDeployWithoutBaseline)' = N'$' + N'(ForceDeployWithoutBaseline)'
      RAISERROR('(This will not throw). Please make sure that all SQLCMD variables are defined before running this script.', 0, 0);
GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
    BEGIN
        IF IS_SRVROLEMEMBER(N'sysadmin') = 1
            BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
            END
        ELSE
            BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
            END
    END
GO
IF @@ERROR != 0
    BEGIN
        SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
    END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Create_Database.sql" -----';
GO

------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ---------------------------
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	PRINT N'Creating $(DatabaseName)...';
END
GO
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	CREATE DATABASE [$(DatabaseName)]; -- MODIFY THIS STATEMENT TO SPECIFY A COLLATION FOR YOUR DATABASE
END

GO
-------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;









------------------------------------------------------------------------------------------------------------------------
------------------------------------------       INCREMENTAL MIGRATIONS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
PRINT '# Setting up migration log table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLog]') AND [type] = 'U'))
  BEGIN
    IF OBJECT_ID(N'[dbo].[__MigrationLogCurrent]', 'V') IS NOT NULL
      DROP VIEW [dbo].[__MigrationLogCurrent];
    PRINT '# Creating a new migration log table';
    CREATE TABLE [dbo].[__MigrationLog] (
      [migration_id] UNIQUEIDENTIFIER NOT NULL,
      [script_checksum] NVARCHAR (64) NOT NULL,
      [script_filename] NVARCHAR (255) NOT NULL,
      [complete_dt] DATETIME2 NOT NULL,
      [applied_by] NVARCHAR (100) NOT NULL,
      [deployed] TINYINT CONSTRAINT [DF___MigrationLog_deployed] DEFAULT (1) NOT NULL,
      [version] VARCHAR (255) NULL,
      [package_version] VARCHAR (255) NULL,
      [release_version] VARCHAR (255) NULL,
      [sequence_no] INT IDENTITY (1, 1) NOT NULL CONSTRAINT [PK___MigrationLog] PRIMARY KEY CLUSTERED ([migration_id], [complete_dt], [script_checksum]));
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_CompleteDt]
      ON [dbo].[__MigrationLog]([complete_dt]);
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_Version]
      ON [dbo].[__MigrationLog]([version]);
    CREATE UNIQUE NONCLUSTERED INDEX [UX___MigrationLog_SequenceNo]
      ON [dbo].[__MigrationLog]([sequence_no]);
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        PRINT N'Creating extended properties';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is required by SQL Change Automation projects to keep track of which migrations have been executed during deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', NULL, NULL;
        EXECUTE sp_addextendedproperty N'MS_Description', N'The executing user at the time of deployment (populated using the SYSTEM_USER function).', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'applied_by';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The date/time that the migration finished executing. This value is populated using the SYSDATETIME function.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'complete_dt';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This column contains a number of potential states:

0 - Marked As Deployed: The migration was not executed.
1- Deployed: The migration was executed successfully.
2- Imported: The migration was generated by importing from this DB.

"Marked As Deployed" and "Imported" are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'deployed';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The unique identifier of a migration script file. This value is stored within the <Migration /> Xml fragment within the header of the file itself.

Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.

In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the "Mark As Deployed" button/command has been run.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'migration_id';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you have enabled SQLCMD Packaging in your SQL Change Automation project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'package_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.
If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.
If deploying via Visual Studio, this column will always be NULL.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'release_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.
Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_checksum';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The name of the migration script file on disk, at the time of build.
If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_filename';
        EXECUTE sp_addextendedproperty N'MS_Description', N'An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'sequence_no';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The semantic version that this migration was created under. In SQL Change Automation projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This view is required by SQL Change Automation projects to determine whether a migration should be executed during a deployment. The view lists the most recent [__MigrationLog] entry for a given [migration_id], which is needed to determine whether a particular programmable object script needs to be (re)executed: a non-matching checksum on the current [__MigrationLog] entry will trigger the execution of a programmable object script. Please do not alter or remove this table from the database.', N'SCHEMA', N'dbo', N'VIEW', N'__MigrationLogCurrent', NULL, NULL;
      END
  END

IF NOT EXISTS (SELECT col.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS col WHERE col.CONSTRAINT_NAME = tab.CONSTRAINT_NAME AND col.TABLE_NAME = tab.TABLE_NAME AND col.TABLE_SCHEMA = tab.TABLE_SCHEMA AND tab.CONSTRAINT_TYPE = 'PRIMARY KEY' AND col.TABLE_SCHEMA = 'dbo' AND col.TABLE_NAME = '__MigrationLog' AND col.COLUMN_NAME = 'complete_dt')
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table has an incorrect primary key specification. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF COL_LENGTH(N'[dbo].[__MigrationLog]', N'sequence_no') IS NULL
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table is missing the [sequence_no] column. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLogCurrent]') AND [type] = 'V'))
  BEGIN
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
  END

GO
PRINT '# Setting up __SchemaSnapshot table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__SchemaSnapshot]')))
  BEGIN
    CREATE TABLE [dbo].[__SchemaSnapshot] (
      [Snapshot] VARBINARY (MAX),
      [LastUpdateDate] DATETIME2 CONSTRAINT [__SchemaSnapshotDateDefault] DEFAULT SYSDATETIME());
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is used by SQL Change Automation projects to store a snapshot of the schema at the time of the last deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__SchemaSnapshot', NULL, NULL;
      END
  END

GO
PRINT '# Truncating __SchemaSnapshot';
TRUNCATE TABLE [dbo].[__SchemaSnapshot];

GO
PRINT '# Check if baseline is required';
DECLARE @baselineRequired AS BIT;

SET @baselineRequired = 0;

IF (EXISTS (SELECT * FROM sys.objects AS o WHERE o.is_ms_shipped = 0 AND NOT (o.name LIKE '%__MigrationLog%' OR o.name LIKE '%__SchemaSnapshot%')) AND (SELECT count(*) FROM [dbo].[__MigrationLog]) = 0)
  SET @baselineRequired = 1;

IF @baselineRequired = 1
  IF '$(ForceDeployWithoutBaseline)' != 'True'
    RAISERROR ('A baseline has not been set for this project, however pre-existing objects have been found in this database. Please set a baseline in the Visual Studio Project Settings, or set ForceDeployWithoutBaseline=True to continue deploying without a baseline.', 16, 127);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00001_20190206_1344_CREATE_authors.sql", ID: {f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00001_20190206_1344_CREATE_authors.sql", ID: {f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.authors
(
    author_id INTEGER IDENTITY(1, 1) NOT NULL
    ,author_code VARCHAR(25) NOT NULL
    ,last_name VARCHAR(50) NOT NULL
    ,first_name VARCHAR(50) NOT NULL
    ,phone_number VARCHAR(12) NOT NULL
    ,address VARCHAR(40) NULL
    ,city VARCHAR(20) NULL
    ,state VARCHAR(2) NULL
    ,zip_code VARCHAR(5) NULL
    ,contract BIT NOT NULL
)
WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.authors ADD CONSTRAINT PK_authors PRIMARY KEY CLUSTERED (author_id) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.authors ADD CONSTRAINT UK_authors_au_id UNIQUE NONCLUSTERED (author_code) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.authors ADD CONSTRAINT CK_authors_au_id CHECK (author_code LIKE ''[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]'');
ALTER TABLE dbo.authors ADD CONSTRAINT CK_authors_zip CHECK (zip_code LIKE ''[0-9][0-9][0-9][0-9][0-9]'');
ALTER TABLE dbo.authors ADD CONSTRAINT DF_authors_phone DEFAULT (''UNKNOWN'') FOR phone_number;

');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00001_20190206_1344_CREATE_authors.sql", ID: {f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f0bed0bc-e661-4b32-8cf6-b7e0b541c8b1' AS UNIQUEIDENTIFIER), '268920116DFC1431B91E5755B107D00304E4837D3F04C75B8CC50047AAEBD43F', 'Migrations\1.0.0\00001_20190206_1344_CREATE_authors.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b3094573-e461-4134-963a-1e0c0f14b72a' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00002_20190206_1348_CREATE_publishers.sql", ID: {b3094573-e461-4134-963a-1e0c0f14b72a} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b3094573-e461-4134-963a-1e0c0f14b72a' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00002_20190206_1348_CREATE_publishers.sql", ID: {b3094573-e461-4134-963a-1e0c0f14b72a} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.publishers
(
    publisher_id INTEGER IDENTITY(1, 1) NOT NULL
    ,publisher_code VARCHAR(25) NOT NULL
    ,publisher_name VARCHAR(40) NULL
    ,city VARCHAR(20) NULL
    ,state VARCHAR(2) NULL
    ,country VARCHAR(30) NULL
	,zip_code VARCHAR(10) NULL
)
WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.publishers ADD CONSTRAINT PK_publishers PRIMARY KEY CLUSTERED (publisher_id) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.publishers ADD CONSTRAINT UK_pub_id UNIQUE NONCLUSTERED (publisher_code) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.publishers ADD CONSTRAINT CK_pub_id CHECK (publisher_code IN (''1389'', ''0736'', ''0877'', ''1622'', ''1756'') OR publisher_code LIKE ''99[0-9][0-9]'');
ALTER TABLE dbo.publishers ADD CONSTRAINT DF_publishers_country DEFAULT (''USA'') FOR country;
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b3094573-e461-4134-963a-1e0c0f14b72a' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00002_20190206_1348_CREATE_publishers.sql", ID: {b3094573-e461-4134-963a-1e0c0f14b72a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b3094573-e461-4134-963a-1e0c0f14b72a' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('b3094573-e461-4134-963a-1e0c0f14b72a' AS UNIQUEIDENTIFIER), 'BC6CFE4DE1A3C2BD1FF0DBFF003B402DAC0AF6C1778F0ABDD3827184858AA0EF', 'Migrations\1.0.0\00002_20190206_1348_CREATE_publishers.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a8a60fe4-1df2-4dcd-be62-d7fc474293e0' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00003_20190206_1354_CREATE_stores.sql", ID: {a8a60fe4-1df2-4dcd-be62-d7fc474293e0} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a8a60fe4-1df2-4dcd-be62-d7fc474293e0' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00003_20190206_1354_CREATE_stores.sql", ID: {a8a60fe4-1df2-4dcd-be62-d7fc474293e0} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.stores
(
    store_id INTEGER IDENTITY(1, 1) NOT NULL
    ,store_code VARCHAR(5) NOT NULL
    ,store_name VARCHAR(40) NULL
    ,store_address VARCHAR(40) NULL
    ,city VARCHAR(20) NULL
    ,state VARCHAR(2) NULL
    ,zip_code VARCHAR(10) NULL
)
WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.stores ADD CONSTRAINT PK_stores PRIMARY KEY CLUSTERED (store_id) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.stores ADD CONSTRAINT UK_stores UNIQUE NONCLUSTERED (store_code) WITH (DATA_COMPRESSION = PAGE);
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a8a60fe4-1df2-4dcd-be62-d7fc474293e0' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00003_20190206_1354_CREATE_stores.sql", ID: {a8a60fe4-1df2-4dcd-be62-d7fc474293e0} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a8a60fe4-1df2-4dcd-be62-d7fc474293e0' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a8a60fe4-1df2-4dcd-be62-d7fc474293e0' AS UNIQUEIDENTIFIER), '967B2E1ABBD0A09C88420D0DAF647B1775F47D3C03A439C359B2E8C036F1B152', 'Migrations\1.0.0\00003_20190206_1354_CREATE_stores.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e1b5a94b-e565-4af5-964b-23c3e92a1bdd' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00004_20190206_1356_CREATE_titles.sql", ID: {e1b5a94b-e565-4af5-964b-23c3e92a1bdd} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e1b5a94b-e565-4af5-964b-23c3e92a1bdd' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00004_20190206_1356_CREATE_titles.sql", ID: {e1b5a94b-e565-4af5-964b-23c3e92a1bdd} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.titles
(
    title_id INTEGER IDENTITY(1, 1) NOT NULL
    ,title_code VARCHAR(25) NOT NULL 
    ,title VARCHAR(80) NOT NULL
    ,title_type CHAR(12) NOT NULL
    ,publisher_id INTEGER NULL
    ,publisher_code CHAR(4) NULL
    ,price MONEY NULL
    ,advance MONEY NULL
    ,royalty INT NULL
    ,year_to_date_sales INT NULL
    ,notes VARCHAR(200) NULL
    ,published_date DATETIME NOT NULL 
)
WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.titles ADD CONSTRAINT PK_titles PRIMARY KEY CLUSTERED (title_id) WITH (DATA_COMPRESSION=PAGE);
ALTER TABLE dbo.titles ADD CONSTRAINT UK_titles UNIQUE NONCLUSTERED (title_code) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.titles ADD CONSTRAINT DF_titles_title_type DEFAULT (''UNDECIDED'') FOR title_type;
ALTER TABLE dbo.titles ADD CONSTRAINT DF_titles_published_date DEFAULT (GETDATE()) FOR published_date;
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e1b5a94b-e565-4af5-964b-23c3e92a1bdd' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00004_20190206_1356_CREATE_titles.sql", ID: {e1b5a94b-e565-4af5-964b-23c3e92a1bdd} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e1b5a94b-e565-4af5-964b-23c3e92a1bdd' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('e1b5a94b-e565-4af5-964b-23c3e92a1bdd' AS UNIQUEIDENTIFIER), 'C97814E5E890C6DCCBE829DC90C9362883DF43FE05112F84B48F3F0D1C5C87A9', 'Migrations\1.0.0\00004_20190206_1356_CREATE_titles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb407fc6-32c7-459e-808f-bd25b6295c2a' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00005_20190206_1405_CREATE_sales.sql", ID: {eb407fc6-32c7-459e-808f-bd25b6295c2a} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb407fc6-32c7-459e-808f-bd25b6295c2a' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00005_20190206_1405_CREATE_sales.sql", ID: {eb407fc6-32c7-459e-808f-bd25b6295c2a} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.sales
(
    sale_id INTEGER IDENTITY(1,1) NOT NULL
	,store_id INTEGER NOT NULL
    ,store_code VARCHAR(4) NOT NULL
    ,ord_num VARCHAR(20) NOT NULL
    ,ord_date DATETIME NOT NULL
    ,qty SMALLINT NOT NULL
    ,payterms VARCHAR(15) NOT NULL
    ,title_id INTEGER NOT NULL
	,title_code VARCHAR(25) NOT NULL

) 
WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.sales ADD CONSTRAINT PK_sales PRIMARY KEY CLUSTERED (sale_id) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.sales ADD CONSTRAINT UK_sales UNIQUE NONCLUSTERED (store_id, ord_num, title_id) WITH (DATA_COMPRESSION = PAGE);


');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb407fc6-32c7-459e-808f-bd25b6295c2a' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00005_20190206_1405_CREATE_sales.sql", ID: {eb407fc6-32c7-459e-808f-bd25b6295c2a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb407fc6-32c7-459e-808f-bd25b6295c2a' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('eb407fc6-32c7-459e-808f-bd25b6295c2a' AS UNIQUEIDENTIFIER), '7937FF9F05D7E50D3E2E5D1487CA48E449A0130513C508293A07F528BED8A96E', 'Migrations\1.0.0\00005_20190206_1405_CREATE_sales.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('394b57ba-7a11-4788-afee-1b1f1afbd224' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00006_20190206_1417_CREATE_royalty.sql", ID: {394b57ba-7a11-4788-afee-1b1f1afbd224} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('394b57ba-7a11-4788-afee-1b1f1afbd224' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00006_20190206_1417_CREATE_royalty.sql", ID: {394b57ba-7a11-4788-afee-1b1f1afbd224} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**               Formerly roysched
**************************************************************************/
CREATE TABLE dbo.royalty
(
    royalty_id INTEGER IDENTITY(1, 1) NOT NULL
    ,title_id INTEGER NOT NULL
    ,title_code VARCHAR(25) NOT NULL
    ,lorange INT NULL
    ,hirange INT NULL
    ,royalty INT NULL
)
WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.royalty ADD CONSTRAINT PK_royalty PRIMARY KEY CLUSTERED (royalty_id)
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('394b57ba-7a11-4788-afee-1b1f1afbd224' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00006_20190206_1417_CREATE_royalty.sql", ID: {394b57ba-7a11-4788-afee-1b1f1afbd224} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('394b57ba-7a11-4788-afee-1b1f1afbd224' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('394b57ba-7a11-4788-afee-1b1f1afbd224' AS UNIQUEIDENTIFIER), '510A78621970778D2D373087D8366709092144AE8F42C667F83CCC1D10503C98', 'Migrations\1.0.0\00006_20190206_1417_CREATE_royalty.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7b1b2eee-922d-4694-a6f6-3dcb586bee27' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00007_20190206_1422_CREATE_title_xref_author.sql", ID: {7b1b2eee-922d-4694-a6f6-3dcb586bee27} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7b1b2eee-922d-4694-a6f6-3dcb586bee27' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00007_20190206_1422_CREATE_title_xref_author.sql", ID: {7b1b2eee-922d-4694-a6f6-3dcb586bee27} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**               Formerly titleauthor
**************************************************************************/
CREATE TABLE dbo.titles_xref_authors
(
    title_xref_author_id INTEGER IDENTITY(1,1) NOT NULL
    ,title_id INTEGER NOT NULL
    ,title_code VARCHAR(25) NOT NULL
    ,author_id INTEGER NOT NULL
    ,author_code VARCHAR(25) NOT NULL
    ,author_order TINYINT NULL
    ,royaltyper INT NULL
)
WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.titles_xref_authors ADD CONSTRAINT PK_title_xref_author PRIMARY KEY CLUSTERED (title_xref_author_id) WITH (DATA_COMPRESSION = PAGE);
ALTER TABLE dbo.titles_xref_authors ADD CONSTRAINT UK_title_xref_author UNIQUE NONCLUSTERED (author_id, title_id) WITH (DATA_COMPRESSION = PAGE);');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7b1b2eee-922d-4694-a6f6-3dcb586bee27' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00007_20190206_1422_CREATE_title_xref_author.sql", ID: {7b1b2eee-922d-4694-a6f6-3dcb586bee27} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7b1b2eee-922d-4694-a6f6-3dcb586bee27' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('7b1b2eee-922d-4694-a6f6-3dcb586bee27' AS UNIQUEIDENTIFIER), '1604408510FF6DBABBAD8834065D371F6BAADAF65F7F6EEEB071FC9A9A01A911', 'Migrations\1.0.0\00007_20190206_1422_CREATE_title_xref_author.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ecb770cd-1561-4e52-9b27-957945373286' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00008_20190207_0701_CREATE_discounts.sql", ID: {ecb770cd-1561-4e52-9b27-957945373286} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ecb770cd-1561-4e52-9b27-957945373286' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00008_20190207_0701_CREATE_discounts.sql", ID: {ecb770cd-1561-4e52-9b27-957945373286} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.discounts
(
	discount_id INTEGER IDENTITY(1,1) NOT NULL
    ,discount_type VARCHAR(40) NOT NULL
    ,store_id INTEGER NOT NULL
    ,store_code VARCHAR(10) NOT NULL
    ,low_qty SMALLINT NULL
    ,high_qty SMALLINT NULL
    ,discount DECIMAL(4,2) NOT NULL
)
WITH(DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.discounts ADD CONSTRAINT PK_discounts PRIMARY KEY CLUSTERED (discount_id) WITH (DATA_COMPRESSION=PAGE);
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ecb770cd-1561-4e52-9b27-957945373286' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00008_20190207_0701_CREATE_discounts.sql", ID: {ecb770cd-1561-4e52-9b27-957945373286} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ecb770cd-1561-4e52-9b27-957945373286' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ecb770cd-1561-4e52-9b27-957945373286' AS UNIQUEIDENTIFIER), '106E4C4704229F859C251D9B49A0359DA8320405C54576224CBD3D5A19F8F2F9', 'Migrations\1.0.0\00008_20190207_0701_CREATE_discounts.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bce7836b-635b-496c-a11f-7f225f7e31d8' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00009_20190207_0703_CREATE_jobs.sql", ID: {bce7836b-635b-496c-a11f-7f225f7e31d8} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bce7836b-635b-496c-a11f-7f225f7e31d8' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00009_20190207_0703_CREATE_jobs.sql", ID: {bce7836b-635b-496c-a11f-7f225f7e31d8} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.jobs
(
    job_id INTEGER IDENTITY(1,1) NOT NULL
    ,job_desc VARCHAR(50) NOT NULL 
    ,min_lvl TINYINT NOT NULL 
    ,max_lvl TINYINT NOT NULL 
)
WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.jobs ADD CONSTRAINT PK_jobs PRIMARY KEY CLUSTERED (job_id);
ALTER TABLE dbo.jobs ADD CONSTRAINT CK_jobs_min_lvl CHECK (min_lvl >= 10);
ALTER TABLE dbo.jobs ADD CONSTRAINT CK_jobs_max_lvl CHECK (max_lvl <= 250);
ALTER TABLE dbo.jobs ADD CONSTRAINT DF_jobs_job_desc DEFAULT (''New Position - title not formalized yet'') FOR job_desc;
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bce7836b-635b-496c-a11f-7f225f7e31d8' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00009_20190207_0703_CREATE_jobs.sql", ID: {bce7836b-635b-496c-a11f-7f225f7e31d8} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bce7836b-635b-496c-a11f-7f225f7e31d8' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('bce7836b-635b-496c-a11f-7f225f7e31d8' AS UNIQUEIDENTIFIER), 'E61CCC6C1977BFDD631586843081B7867FA8ECD667F35455C9A6374272D2A2DF', 'Migrations\1.0.0\00009_20190207_0703_CREATE_jobs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a6ca7d67-85fc-4797-b5e8-a6a586aa3a00' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00010_20190207_0708_CREATE_publisher_info.sql", ID: {a6ca7d67-85fc-4797-b5e8-a6a586aa3a00} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a6ca7d67-85fc-4797-b5e8-a6a586aa3a00' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00010_20190207_0708_CREATE_publisher_info.sql", ID: {a6ca7d67-85fc-4797-b5e8-a6a586aa3a00} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.publisher_info
(
    publisher_id INTEGER NOT NULL
	,publisher_code VARCHAR(25) NOT NULL
    ,logo IMAGE NULL
    ,publisher_info VARCHAR(MAX) NULL
)
WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.publisher_info ADD CONSTRAINT PK_publisher_info PRIMARY KEY CLUSTERED (publisher_id) WITH (DATA_COMPRESSION=PAGE);');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a6ca7d67-85fc-4797-b5e8-a6a586aa3a00' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00010_20190207_0708_CREATE_publisher_info.sql", ID: {a6ca7d67-85fc-4797-b5e8-a6a586aa3a00} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a6ca7d67-85fc-4797-b5e8-a6a586aa3a00' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a6ca7d67-85fc-4797-b5e8-a6a586aa3a00' AS UNIQUEIDENTIFIER), '892F61747352FDD9367D92C2AD321D5ABA79421AED4A6155430462BE661CF23D', 'Migrations\1.0.0\00010_20190207_0708_CREATE_publisher_info.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cbfe8b56-a14a-4d70-b36c-22d425e4036b' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00011_20190207_0711_CREATE_employee.sql", ID: {cbfe8b56-a14a-4d70-b36c-22d425e4036b} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cbfe8b56-a14a-4d70-b36c-22d425e4036b' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00011_20190207_0711_CREATE_employee.sql", ID: {cbfe8b56-a14a-4d70-b36c-22d425e4036b} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Create Pub tables.
**************************************************************************/
CREATE TABLE dbo.employees
(
    employee_id INTEGER IDENTITY(1,1) NOT NULL
	,employee_code VARCHAR(25) NOT NULL
    ,first_name VARCHAR(50) NOT NULL
    ,middle_name VARCHAR(50) NOT NULL
    ,last_name VARCHAR(30) NOT NULL
    ,job_id INTEGER NOT NULL 
    ,job_lvl TINYINT NOT NULL    
	,publisher_id INTEGER NOT NULL
    ,publisher_code VARCHAR(25) NOT NULL
	,hire_date DATETIME NOT NULL
)
WITH (DATA_COMPRESSION=PAGE)

ALTER TABLE dbo.employees ADD CONSTRAINT PK_employees PRIMARY KEY NONCLUSTERED (employee_id);
ALTER TABLE dbo.employees
ADD CONSTRAINT CK_employees_employee_code CHECK (employee_code LIKE ''[A-Z][A-Z][A-Z][1-9][0-9][0-9][0-9][0-9][FM]''
                                                 OR employee_code LIKE ''[A-Z]-[A-Z][1-9][0-9][0-9][0-9][0-9][FM]''
                                                );
ALTER TABLE dbo.employees ADD CONSTRAINT DF_employees_job_id DEFAULT (1) FOR job_id;
ALTER TABLE dbo.employees ADD CONSTRAINT DF_employees_job_lvl DEFAULT (1) FOR job_lvl;
ALTER TABLE dbo.employees ADD CONSTRAINT DF_employees_hire_date DEFAULT (GETDATE()) FOR hire_date;
ALTER TABLE dbo.employees ADD CONSTRAINT FK_employees_jobs FOREIGN KEY (job_id) REFERENCES dbo.jobs (job_id)
ALTER TABLE dbo.employees ADD CONSTRAINT DF_employees_publisher_code DEFAULT (''9952'') FOR publisher_code
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cbfe8b56-a14a-4d70-b36c-22d425e4036b' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00011_20190207_0711_CREATE_employee.sql", ID: {cbfe8b56-a14a-4d70-b36c-22d425e4036b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cbfe8b56-a14a-4d70-b36c-22d425e4036b' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('cbfe8b56-a14a-4d70-b36c-22d425e4036b' AS UNIQUEIDENTIFIER), 'B565EE1F91343CEB84F3B54BFEBED3CBE9AF2480D1EB1EBA7CFADEA2DEFAD55B', 'Migrations\1.0.0\00011_20190207_0711_CREATE_employee.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7e094178-9ee1-40ae-8eb8-2e186d213ce2' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00012_20190207_0813_INSERT_authors.sql", ID: {7e094178-9ee1-40ae-8eb8-2e186d213ce2} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7e094178-9ee1-40ae-8eb8-2e186d213ce2' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00012_20190207_0813_INSERT_authors.sql", ID: {7e094178-9ee1-40ae-8eb8-2e186d213ce2} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Load data into pubs tables
**************************************************************************/
SET IDENTITY_INSERT dbo.authors ON; 

INSERT INTO dbo.authors(author_id,author_code,last_name,first_name,phone_number,address,city,state,zip_code,contract)
VALUES(1,''409-56-7008'', ''Bennet'', ''Abraham'', ''415 658-9932'',''6223 Bateman St.'', ''Berkeley'', ''CA'', ''94705'', 1)
,(2,''213-46-8915'', ''Green'', ''Marjorie'', ''415 986-7020'',''309 63rd St. #411'', ''Oakland'', ''CA'', ''94618'', 1)
,(3,''238-95-7766'', ''Carson'', ''Cheryl'', ''415 548-7723'',''589 Darwin Ln.'', ''Berkeley'', ''CA'', ''94705'', 1)
,(4,''998-72-3567'', ''Ringer'', ''Albert'', ''801 826-0752'',''67 Seventh Av.'', ''Salt Lake City'', ''UT'', ''84152'', 1)
,(5,''899-46-2035'', ''Ringer'', ''Anne'', ''801 826-0752'',''67 Seventh Av.'', ''Salt Lake City'', ''UT'', ''84152'', 1)
,(6,''722-51-5454'', ''DeFrance'', ''Michel'', ''219 547-9982'',''3 Balding Pl.'', ''Gary'', ''IN'', ''46403'', 1)
,(7,''807-91-6654'', ''Panteley'', ''Sylvia'', ''301 946-8853'',''1956 Arlington Pl.'', ''Rockville'', ''MD'', ''20853'', 1)
,(8,''893-72-1158'', ''McBadden'', ''Heather'',''707 448-4982'', ''301 Putnam'', ''Vacaville'', ''CA'', ''95688'', 0)
,(9,''724-08-9931'', ''Stringer'', ''Dirk'', ''415 843-2991'',''5420 Telegraph Av.'', ''Oakland'', ''CA'', ''94609'', 0)
,(10,''274-80-9391'', ''Straight'', ''Dean'', ''415 834-2919'',''5420 College Av.'', ''Oakland'', ''CA'', ''94609'', 1)
,(11,''756-30-7391'', ''Karsen'', ''Livia'', ''415 534-9219'',''5720 McAuley St.'', ''Oakland'', ''CA'', ''94609'', 1)
,(12,''724-80-9391'', ''MacFeather'', ''Stearns'', ''415 354-7128'',''44 Upland Hts.'', ''Oakland'', ''CA'', ''94612'', 1)
,(13,''427-17-2319'', ''Dull'', ''Ann'', ''415 836-7128'',''3410 Blonde St.'', ''Palo Alto'', ''CA'', ''94301'', 1)
,(14,''672-71-3249'', ''Yokomoto'', ''Akiko'', ''415 935-4228'',''3 Silver Ct.'', ''Walnut Creek'', ''CA'', ''94595'', 1)
,(15,''267-41-2394'', ''O''''Leary'', ''Michael'', ''408 286-2428'',''22 Cleveland Av. #14'', ''San Jose'', ''CA'', ''95128'', 1)
,(16,''472-27-2349'', ''Gringlesby'', ''Burt'', ''707 938-6445'',''PO Box 792'', ''Covelo'', ''CA'', ''95428'', 3)
,(17,''527-72-3246'', ''Greene'', ''Morningstar'', ''615 297-2723'',''22 Graybar House Rd.'', ''Nashville'', ''TN'', ''37215'', 0)
,(18,''172-32-1176'', ''White'', ''Johnson'', ''408 496-7223'',''10932 Bigge Rd.'', ''Menlo Park'', ''CA'', ''94025'', 1)
,(19,''712-45-1867'', ''del Castillo'', ''Innes'', ''615 996-8275'',''2286 Cram Pl. #86'', ''Ann Arbor'', ''MI'', ''48105'', 1)
,(20,''846-92-7186'', ''Hunter'', ''Sheryl'', ''415 836-7128'',''3410 Blonde St.'', ''Palo Alto'', ''CA'', ''94301'', 1)
,(21,''486-29-1786'', ''Locksley'', ''Charlene'', ''415 585-4620'',''18 Broadway Av.'', ''San Francisco'', ''CA'', ''94130'', 1)
,(22,''648-92-1872'', ''Blotchet-Halls'', ''Reginald'', ''503 745-6402'',''55 Hillsdale Bl.'', ''Corvallis'', ''OR'', ''97330'', 1)
,(23,''341-22-1782'', ''Smith'', ''Meander'', ''913 843-0462'',''10 Mississippi Dr.'', ''Lawrence'', ''KS'', ''66044'', 0)

SET IDENTITY_INSERT dbo.authors OFF; ');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7e094178-9ee1-40ae-8eb8-2e186d213ce2' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00012_20190207_0813_INSERT_authors.sql", ID: {7e094178-9ee1-40ae-8eb8-2e186d213ce2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7e094178-9ee1-40ae-8eb8-2e186d213ce2' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('7e094178-9ee1-40ae-8eb8-2e186d213ce2' AS UNIQUEIDENTIFIER), '325F3EDF2416B4AD17E07E26A323E1C21E2EA4DB13DF470F6AC5B5934A6C77FA', 'Migrations\1.0.0\00012_20190207_0813_INSERT_authors.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1cfad9b3-e84a-4a78-948f-82b2d19346bb' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00013_20190207_1043_INSERT_publishers.sql", ID: {1cfad9b3-e84a-4a78-948f-82b2d19346bb} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1cfad9b3-e84a-4a78-948f-82b2d19346bb' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00013_20190207_1043_INSERT_publishers.sql", ID: {1cfad9b3-e84a-4a78-948f-82b2d19346bb} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Load data into pubs tables
**************************************************************************/
SET IDENTITY_INSERT dbo.publishers ON; 
INSERT INTO dbo.publishers(publisher_id,publisher_code,publisher_name,city,state,country)
VALUES (1, ''0736'', ''New Moon Books'', ''Boston'', ''MA'', ''USA'')
,(2,''0877'', ''Binnet & Hardley'', ''Washington'', ''DC'', ''USA'')
,(3,''1389'', ''Algodata Infosystems'', ''Berkeley'', ''CA'', ''USA'')
,(4,''9952'', ''Scootney Books'', ''New York'', ''NY'', ''USA'')
,(5,''1622'', ''Five Lakes Publishing'', ''Chicago'', ''IL'', ''USA'')
,(6,''1756'', ''Ramona Publishers'', ''Dallas'', ''TX'', ''USA'')
,(7,''9901'', ''GGG&G'', ''Munchen'', NULL, ''Germany'')
,(8,''9999'', ''Lucerne Publishing'', ''Paris'', NULL, ''France'')
SET IDENTITY_INSERT dbo.publishers OFF;');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1cfad9b3-e84a-4a78-948f-82b2d19346bb' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00013_20190207_1043_INSERT_publishers.sql", ID: {1cfad9b3-e84a-4a78-948f-82b2d19346bb} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1cfad9b3-e84a-4a78-948f-82b2d19346bb' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1cfad9b3-e84a-4a78-948f-82b2d19346bb' AS UNIQUEIDENTIFIER), '9833665AF4DDE6082E2BCFF4CF660CF99F1F34AB811FD386A1F13F61FB8E2D31', 'Migrations\1.0.0\00013_20190207_1043_INSERT_publishers.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('facc636f-f5e6-475a-b140-e777fc8d6a7e' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00014_20190207_1055_INSERT_publisher_info.sql", ID: {facc636f-f5e6-475a-b140-e777fc8d6a7e} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('facc636f-f5e6-475a-b140-e777fc8d6a7e' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00014_20190207_1055_INSERT_publisher_info.sql", ID: {facc636f-f5e6-475a-b140-e777fc8d6a7e} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/
insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info)
values(1,
''0736'', 0x
''This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.'')

insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info) 
VALUES(2,''0877'', 0x
''This is sample text data for Binnet & Hardley, publisher 0877 in the pubs database. Binnet & Hardley is located in Washington, D.C.'')

insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info)  
VALUES(3,''1389'', 0x
''This is sample text data for Algodata Infosystems, publisher 1389 in the pubs database. Algodata Infosystems is located in Berkeley, California.'')


INSERT dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info) 
VALUES(5, ''1622'', 0x474946383961F5003400B30F00000000800000008000808000000080800080008080808080C0C0C0FF000000FF00FFFF000000FFFF00FF00FFFFFFFFFF21F9040100000F002C00000000F50034004004FFF0C949ABBD38EBCDBBFF60288E64D90166AA016CEBBEB02ACF746D67E82DC2ACEEFFC0A02997B31027C521EF25698D8E42230E049D3E8AD8537385BC4179DB6B574C26637BE58BF38A1EB393DF2CE55CA52731F77918BE9FAFCD6180817F697F5F6E6C7A836D62876A817A79898A7E31524D708E7299159C9456929F9044777C6575A563A68E827D9D4C8D334BB3B051B6B7B83A8490B91EB4B3BDC1C251A1C24BC3C8C9C8C5C4BFCCCAD0D135ACC36B2E3BBCB655AD1CDB8F6921DEB8D48AA9ADA46046D7E0DC829B9D98E9988878D9AAE5AEF875BC6DEFF7E7A35C9943F18CCA3175C0A4295C48625F3B8610234A0C17D159C289189515CC7531A3C7891BFF9B59FA4812634820F24AAA94882EA50D8BBB3E8813598B8A3D7C0D6F12CB8710E5BA7536D9ED3C458F8B509CF17CE94CEA658F254D944889528306E83C245089629DDA4F8BD65885049ACBB7ADAB2A5364AFDAF344902752409A6085FA39105EBB3C2DAB2E52FA8611B7ACFA060956CB1370598176DB3E74FB956CCCA77207BB6B8CAAAADEA3FFBE01A48CD871D65569C37E25A458C5C9572E57AADE59F7F40A98B456CB36560F730967B3737B74ADBBB7EFDABF830BE70B11F6C8E1C82F31345E33B9F3A5C698FB7D4E9D779083D4B313D7985ABB77E0C9B07F1F0F3EFA71F2E8ED56EB98BEBD7559306FC72C6995EA7499F3B5DDA403FF17538AB6FD20C9FF7D463D531681971888E0104E45069D7C742D58DB7B29B45454811B381420635135B5D838D6E487612F876D98D984B73D2820877DFD871523F5E161D97DD7FCB4C82E31BEC8176856D9D8487D95E1E5D711401AE2448EF11074E47E9D69359382E8A8871391880C28E5861636399950FEFCA55E315D8279255C2C6AA89899B68588961C5B82C366693359F1CA89ACACB959971D76F6E6607B6E410E9D57B1A9196A52BDD56636CC08BA519C5E1EDA8743688906DA9D53F2E367999656A96292E2781397A6264E62A04E25FE49A59354696958409B11F527639DEAC84E7795553A9AACA85C68E8977D2A7919A5A7F83329A46F0D79698BF60D98688CCC118A6C3F8F38E6D89C8C12F635E49145F6132D69DCCE684725FC0546C3B40875D79E70A5867A8274E69E8BAEAC1FEEC02E92EE3AA7ADA015365BEFBE83F2EB6F351100003B,
''This is sample text data for Five Lakes Publishing, publisher 1622 in the pubs database. Five Lakes Publishing is located in Chicago, Illinois.'')

insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info) 
VALUES(6,''1756'', 0x
''This is sample text data for Ramona Publishers, publisher 1756 in the pubs database. Ramona Publishers is located in Dallas, Texas.'')

insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info) 
VALUES(7, ''9901'', 0x4749463839615D002200B30F00000000800000008000808000000080800080008080808080C0C0C0FF000000FF00FFFF000000FFFF00FF00FFFFFFFFFF21F9040100000F002C000000005D0022004004FFF0C949ABBD38EBCDFB03DF078C249895A386AA68BB9E6E0ACE623ABD1BC9E9985DFFB89E8E366BED782C5332563ABA4245A6744AAD5AAF4D2276CBED5EA1D026C528B230CD38B2C92721D78CC4772526748F9F611EB28DE7AFE25E818283604A1E8788898A7385838E8F55856F6C2C1D86392F6B9730708D6C5477673758A3865E92627E94754E173697A6A975809368949BB2AE7B9A6865AA734F80A2A17DA576AA5BB667C290CDCE4379CFD2CE9ED3D6A7CCD7DAA4D9C79341C8B9DF5FC052A8DEBA9BB696767B9C7FD5B8BBF23EABB9706BCAE5F05AB7E6C4C7488DDAF7251BC062530EFE93638C5B3580ECD4951312C217C425E73E89D38709D79D810D393BD20A528CE0AA704AA2D4D3082E583C89BD2C2D720753E1C8922697D44CF6AE53BF6D4041750B4AD467C54548932A1D7374A9D3A789004400003B,
''This is sample text data for GGG&G, publisher 9901 in the pubs database. GGG&G is located in Munchen, Germany.'')

insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info) 
VALUES(4, ''9952'', 0x47494638396107012800B30F00000000800000008000808000000080800080008080808080C0C0C0FF000000FF00FFFF000000FFFF00FF00FFFFFFFFFF21F9040100000F002C00000000070128004004FFF0C949ABBD38EBCDBBFF60288E6469660005AC2C7BB56D05A7D24C4F339E3F765FC716980C3824F28418E4D1A552DA8ACCA5517A7B526F275912690D2A9BD11D14AB8B8257E7E9776BDEE452C2279C47A5CBEDEF2B3C3FBF9FC85981821D7D76868588878A898C8B838F1C8D928E733890829399949B979D9E9FA074A1A3A4A5A6A7458F583E69803F53AF4C62AD5E6DB13B6B3DAEAC6EBA64B365B26BB7ABBEB5C07FB428BCC4C8C1CCC7BBB065637C7A9B7BBE8CDADBDA8B7C31D9E1D88E2FA89E9AE9E49AE7EDA48DA2EEF2F3F4F597AEF6F9FAFBFC805D6CD28C0164C64D18BE3AAD88D87AA5C1DBC07FD59CE54293F0E0882AC39ED9CA2886E3308FB3FF262EBC726D591823204F2E0C09A4A3B32CFEACBC24198D86C48FD3E208D43832E3C0671A2D89737167281AA333219AC048D061499A3C83BEC8090BD84E5A99DE808B730DE9516B727CE85AE7C122BF73EAD29255CB76ADDBB6EC549C8504F7AD5DB37343A98D97576EDDBF7CFB0AEE8457EF5D4E83132BAEB1B8B1E3C749204B9EACB830E5CB984DE1F339A4E1CC88C93CB7D989D72234D1D3A672FEF85055C483C80A06742ADB664F3563119E417D5A8F52DFB1512AEC5D82E9C8662A477FB19A72B6F2E714413F8D0654AA75A8C4C648FDBC346ACDCD5487AFC439BE8BC8E8AA7F6BD77D2B7DF4E6C5882E57DFBDE2F56AEE6D87DFB8BFE06BE7E8F1C6CBCE4D2DC15751803C5956567EFA1D47A041E5F1176183CC1D571D21C2850396565CF5B1D5571D8AC21D08E099A15E85269E87207B1736B31E6FE620324E582116F5215178C86763518A9068DF7FE8C9C6207DCD0104A47B6B717388901EFA27238E3482454E43BB61E8D388F7FD44DD32473E79D43A527633232561E6F86536660256891699D175989A6F1A020A9C75C9D5E68274C619D79D91B5C5189F7906CA67297129D88F9E881A3AA83E8AB623E85E8B0EDAE89C892216E9A584B80318A69C7E3269A7A046FA69A8A4B6094004003B,
''This is sample text data for Scootney Books, publisher 9952 in the pubs database. Scootney Books is located in New York City, New York.'')

insert dbo.publisher_info(publisher_id,publisher_code,logo,publisher_info) 
VALUES(8,''9999'', 0x474946383961A9002400B30F00000000800000008000808000000080800080008080808080C0C0C0FF000000FF00FFFF000000FFFF00FF00FFFFFFFFFF21F9040100000F002C00000000A90024004004FFF0C949ABBD38EBCDBBFF60F8011A609E67653EA8D48A702CCFF44566689ED67CEFFF23D58E7513B686444A6EA26B126FC8E74AC82421A7ABE5F4594D61B7BBF0D6F562719A68A07ACDC6389925749AFC6EDBEFBCA24D3E96E2FF803D7A1672468131736E494A8B5C848D8633834B916E598B657E4A83905F7D9B7B56986064A09BA2A68D63603A2E717C9487B2B3209CA7AD52594751B4BD80B65D75B799BEC5BFAF7CC6CACB6638852ACC409F901BD33EB6BCCDC1D1CEA9967B23C082C3709662A69FA4A591E7AE84D87A5FA0AB502F43AC5D74EB9367B0624593FA5CB101ED144173E5F4315AE8485B4287FCBE39E446B1624173FEAC59DC2809594623D9C3388A54E4ACD59C642353E2F098E919319530DD61C405C7CBCB9831C5E5A2192C244E983A3FFE1CDA21282CA248ABB18C25336952A389D689E489B0D24483243B66CD8775A315801AA5A60A6B2DAC074E3741D6BBA8902BA687E9A6D1A3B6D6D15C7460C77AA3E3E556D79EBAF4AAAAB2CFCF578671DFDE657598305D51F7BE5E5A25361ED3388EED0A84B2B7535D6072C1D62DB5588BE5CCA5B1BDA377B99E3CBE9EDA31944A951ADF7DB15263A1429B37BB7E429D8EC4D754B87164078F2B87012002003B,
''This is sample text data for Lucerne Publishing, publisher 9999 in the pubs database. Lucerne publishing is located in Paris, France.'')
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('facc636f-f5e6-475a-b140-e777fc8d6a7e' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00014_20190207_1055_INSERT_publisher_info.sql", ID: {facc636f-f5e6-475a-b140-e777fc8d6a7e} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('facc636f-f5e6-475a-b140-e777fc8d6a7e' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('facc636f-f5e6-475a-b140-e777fc8d6a7e' AS UNIQUEIDENTIFIER), 'DFA390D90191B3012A5D742831A4A3F433BB34E9AA943DFAF2DCBC09B8CB26E8', 'Migrations\1.0.0\00014_20190207_1055_INSERT_publisher_info.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55dca4a2-09e5-40ef-886f-b733eb2d411c' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00015_20190207_1113_INSERT_titles.sql", ID: {55dca4a2-09e5-40ef-886f-b733eb2d411c} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55dca4a2-09e5-40ef-886f-b733eb2d411c' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00015_20190207_1113_INSERT_titles.sql", ID: {55dca4a2-09e5-40ef-886f-b733eb2d411c} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/

SET IDENTITY_INSERT dbo.titles ON;

insert dbo.titles(title_id,title_code,title,title_type,publisher_id,publisher_code,price,advance,royalty,year_to_date_sales,notes,published_date)
values 
(1,''PC8888'', ''Secrets of Silicon Valley'', ''popular_comp'', 3,''1389'',$20.00, $8000.00, 10, 4095,''Muckraking reporting on the world''''s largest computer hardware and software manufacturers.'',''06/12/94'')
,(2,''BU1032'', ''The Busy Executive''''s Database Guide'', ''business'',3,''1389'', $19.99, $5000.00, 10, 4095,''An overview of available database systems with emphasis on common business applications. Illustrated.'',''06/12/91'')
,(3,''PS7777'', ''Emotional Security: A New Algorithm'', ''psychology'',1,''0736'', $7.99, $4000.00, 10, 3336,''Protecting yourself and your loved ones from undue emotional stress in the modern world. Use of computer and nutritional aids emphasized.'',''06/12/91'')
,(4,''PS3333'', ''Prolonged Data Deprivation: Four Case Studies'',''psychology'',1,''0736'', $19.99, $2000.00, 10, 4072,''What happens when the data runs dry?  Searching evaluations of information-shortage effects.'',''06/12/91'')
,(5,''BU1111'', ''Cooking with Computers: Surreptitious Balance Sheets'',''business'', 3,''1389'', $11.95, $5000.00, 10, 3876,''Helpful hints on how to use your electronic resources to the best advantage.'',''06/09/91'')
,(6,''MC2222'', ''Silicon Valley Gastronomic Treats'', ''mod_cook'', 2,''0877'',$19.99, $0.00, 12, 2032,''Favorite recipes for quick, easy, and elegant meals.'',''06/09/91'')
,(7,''TC7777'', ''Sushi, Anyone?'', ''trad_cook'', 2,''0877'', $14.99, $8000.00,10, 4095,''Detailed instructions on how to make authentic Japanese sushi in your spare time.'',''06/12/91'')
,(8,''TC4203'', ''Fifty Years in Buckingham Palace Kitchens'', ''trad_cook'',2,''0877'', $11.95, $4000.00, 14, 15096,''More anecdotes from the Queen''''s favorite cook describing life among English royalty. Recipes, techniques, tender vignettes.'',''06/12/91'')
,(9,''PC1035'', ''But Is It User Friendly?'', ''popular_comp'', 3,''1389'',$22.95, $7000.00, 16, 8780,''A survey of software for the naive user, focusing on the ''''friendliness'''' of each.'',''06/30/91'')
,(10,''BU2075'', ''You Can Combat Computer Stress!'', ''business'',1,''0736'',$2.99, $10125.00, 24, 18722,''The latest medical and psychological techniques for living with the electronic office. Easy-to-understand explanations.'',''06/30/91'')
,(11,''PS2091'', ''Is Anger the Enemy?'', ''psychology'',1,''0736'', $10.95,$2275.00, 12, 2045,''Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'',''06/15/91'')
,(12,''PS2106'', ''Life Without Fear'', ''psychology'',1,''0736'', $7.00, $6000.00,10, 111,''New exercise, meditation, and nutritional techniques that can reduce the shock of daily interactions. Popular audience. Sample menus included, exercise video available separately.'',''10/05/91'')
,(13,''MC3021'', ''The Gourmet Microwave'', ''mod_cook'', 2,''0877'', $2.99,$15000.00, 24, 22246,''Traditional French gourmet recipes adapted for modern microwave cooking.'',''06/18/91'')
,(14,''TC3218'', ''Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean'',''trad_cook'', 2,''0877'', $20.95, $7000.00, 10, 375,''Profusely illustrated in color, this makes a wonderful gift book for a cuisine-oriented friend.'',''10/21/91'')
,(15,''MC3026'',''The Psychology of Computer Cooking'',''trad_cook'',2,''0877'', $19.99, $7000.00, 10, 375, '''', ''05-15-1996'')
,(16,''BU7832'', ''Straight Talk About Computers'', ''business'',3,''1389'',$19.99, $5000.00, 10, 4095,''Annotated analysis of what computers can do for you: a no-hype guide for the critical user.'',''06/22/91'')
,(17,''PS1372'', ''Computer Phobic AND Non-Phobic Individuals: Behavior Variations'',''psychology'',2,''0877'', $21.59, $7000.00, 10, 375,''A must for the specialist, this book examines the difference between those who hate and fear computers and those who don''''t.'',''10/21/91'')
,(18,''PC9999'', ''Net Etiquette'',''popular_comp'', 3,''1389'', $15.95, $1000, 9, 120, ''A must-read for computer conferencing.'', ''07-20-1985'')

SET IDENTITY_INSERT dbo.titles OFF;');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55dca4a2-09e5-40ef-886f-b733eb2d411c' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00015_20190207_1113_INSERT_titles.sql", ID: {55dca4a2-09e5-40ef-886f-b733eb2d411c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55dca4a2-09e5-40ef-886f-b733eb2d411c' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('55dca4a2-09e5-40ef-886f-b733eb2d411c' AS UNIQUEIDENTIFIER), '57C1DB7577A78EC4FEAEED8F5A0B3DCB40D35E876EE8DDE8814F92648C202D83', 'Migrations\1.0.0\00015_20190207_1113_INSERT_titles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('099d5119-8dcd-4cb1-85a0-05a2937cf834' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00016_20190207_1123_INSERT_titles_xref_authors.sql", ID: {099d5119-8dcd-4cb1-85a0-05a2937cf834} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('099d5119-8dcd-4cb1-85a0-05a2937cf834' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00016_20190207_1123_INSERT_titles_xref_authors.sql", ID: {099d5119-8dcd-4cb1-85a0-05a2937cf834} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Load data into pubs tables
**************************************************************************/
insert dbo.titles_xref_authors(author_id,author_code,title_id,title_code,author_order,royaltyper)
VALUES
(1,''409-56-7008'', 2,''BU1032'', 1, 60)
,(21,''486-29-1786'', 3,''PS7777'', 1, 100)
,(21,''486-29-1786'', 18,''PC9999'', 1, 100)
,(19,''712-45-1867'', 6,''MC2222'', 1, 100)
,(18,''172-32-1176'', 4,''PS3333'', 1, 100)
,(2,''213-46-8915'', 2,''BU1032'', 2, 40)
,(3,''238-95-7766'', 9,''PC1035'', 1, 100)
,(2,''213-46-8915'', 10,''BU2075'', 1, 100)
,(4,''998-72-3567'', 11,''PS2091'', 1, 50)
,(5,''899-46-2035'', 11,''PS2091'', 2, 50)
,(4,''998-72-3567'', 12,''PS2106'', 1, 100)
,(6,''722-51-5454'', 13,''MC3021'', 1, 75)
,(5,''899-46-2035'', 13,''MC3021'', 2, 25)
,(7,''807-91-6654'', 14,''TC3218'', 1, 100)
,(10,''274-80-9391'', 16,''BU7832'', 1, 100)
,(13,''427-17-2319'', 1,''PC8888'', 1, 50)
,(20,''846-92-7186'', 1,''PC8888'', 2, 50)
,(11,''756-30-7391'', 17,''PS1372'', 1, 75)
,(12,''724-80-9391'', 17,''PS1372'', 2, 25)
,(12,''724-80-9391'', 5,''BU1111'', 1, 60)
,(15,''267-41-2394'', 5,''BU1111'', 2, 40)
,(14,''672-71-3249'', 7,''TC7777'', 1, 40)
,(15,''267-41-2394'', 7,''TC7777'', 2, 30)
,(16,''472-27-2349'', 7,''TC7777'', 3, 30)
,(22,''648-92-1872'', 8,''TC4203'', 1, 100)
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('099d5119-8dcd-4cb1-85a0-05a2937cf834' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00016_20190207_1123_INSERT_titles_xref_authors.sql", ID: {099d5119-8dcd-4cb1-85a0-05a2937cf834} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('099d5119-8dcd-4cb1-85a0-05a2937cf834' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('099d5119-8dcd-4cb1-85a0-05a2937cf834' AS UNIQUEIDENTIFIER), 'FB0525996AD2141721752D78B6549CD8583D8CBF657527349FAAD106058ECD8B', 'Migrations\1.0.0\00016_20190207_1123_INSERT_titles_xref_authors.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('49cd45cc-dbb9-438a-9858-61326a8af4af' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00017_20190207_1334_INSERT_stores.sql", ID: {49cd45cc-dbb9-438a-9858-61326a8af4af} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('49cd45cc-dbb9-438a-9858-61326a8af4af' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00017_20190207_1334_INSERT_stores.sql", ID: {49cd45cc-dbb9-438a-9858-61326a8af4af} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/

SET IDENTITY_INSERT dbo.stores ON; 
insert dbo.stores(store_id,store_code,store_name,store_address,city,state,zip_code)
values(1, ''7066'',''Barnum''''s'',''567 Pasadena Ave.'',''Tustin'',''CA'',''92789'')
,(2,''7067'',''News & Brews'',''577 First St.'',''Los Gatos'',''CA'',''96745'')
,(3,''7131'',''Doc-U-Mat: Quality Laundry and Books'',''24-A Avogadro Way'',''Remulade'',''WA'',''98014'')
,(4,''8042'',''Bookbeat'',''679 Carson St.'',''Portland'',''OR'',''89076'')
,(5,''6380'',''Eric the Read Books'',''788 Catamaugus Ave.'',''Seattle'',''WA'',''98056'')
,(6,''7896'',''Fricative Bookshop'',''89 Madison St.'',''Fremont'',''CA'',''90019'')
SET IDENTITY_INSERT dbo.stores OFF; ');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('49cd45cc-dbb9-438a-9858-61326a8af4af' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00017_20190207_1334_INSERT_stores.sql", ID: {49cd45cc-dbb9-438a-9858-61326a8af4af} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('49cd45cc-dbb9-438a-9858-61326a8af4af' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('49cd45cc-dbb9-438a-9858-61326a8af4af' AS UNIQUEIDENTIFIER), 'F3C66B3B1CC4E3FDA9887E03D09D4463E48D3DFCF89E2B3DF1D80ACE67595C54', 'Migrations\1.0.0\00017_20190207_1334_INSERT_stores.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec1c0f42-6907-4cdf-9a54-cbb8dd448bae' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00018_20190207_1343_INSERT_sales.sql", ID: {ec1c0f42-6907-4cdf-9a54-cbb8dd448bae} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec1c0f42-6907-4cdf-9a54-cbb8dd448bae' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00018_20190207_1343_INSERT_sales.sql", ID: {ec1c0f42-6907-4cdf-9a54-cbb8dd448bae} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/

INSERT dbo.sales(store_id,store_code,ord_num,ord_date,qty,payterms,title_id,title_code)
values(1,''7066'', ''QA7442.3'', ''09/13/94'', 75, ''ON invoice'',11,''PS2091'')
,(2,''7067'', ''D4482'', ''09/14/94'', 10, ''Net 60'',11,''PS2091'')
,(3,''7131'', ''N914008'', ''09/14/94'', 20, ''Net 30'',11,''PS2091'')
,(3,''7131'', ''N914014'', ''09/14/94'', 25, ''Net 30'',13,''MC3021'')
,(4,''8042'', ''423LL922'', ''09/14/94'', 15, ''ON invoice'',13,''MC3021'')
,(4,''8042'', ''423LL930'', ''09/14/94'', 10, ''ON invoice'',2,''BU1032'')
,(5,''6380'', ''722a'', ''09/13/94'', 3, ''Net 60'',11,''PS2091'')
,(5,''6380'', ''6871'', ''09/14/94'', 5, ''Net 60'',2,''BU1032'')
,(4,''8042'',''P723'', ''03/11/93'', 25, ''Net 30'',5,''BU1111'')
,(6,''7896'',''X999'', ''02/21/93'', 35, ''ON invoice'', 10,''BU2075'')
,(6,''7896'',''QQ2299'', ''10/28/93'', 15, ''Net 60'', 16,''BU7832'')
,(6,''7896'',''TQ456'', ''12/12/93'', 10, ''Net 60'', 6,''MC2222'')
,(4,''8042'',''QA879.1'', ''5/22/93'', 30, ''Net 30'',9,''PC1035'')
,(1,''7066'',''A2976'', ''5/24/93'', 50, ''Net 30'', 1,''PC8888'')
,(3,''7131'',''P3087a'', ''5/29/93'', 20, ''Net 60'', 17,''PS1372'')
,(3,''7131'',''P3087a'', ''5/29/93'', 25, ''Net 60'', 12,''PS2106'')
,(3,''7131'',''P3087a'', ''5/29/93'', 15, ''Net 60'', 4,''PS3333'')
,(3,''7131'',''P3087a'', ''5/29/93'', 25, ''Net 60'', 3,''PS7777'')
,(2,''7067'',''P2121'', ''6/15/92'', 40, ''Net 30'', 14, ''TC3218'')
,(2,''7067'',''P2121'', ''6/15/92'', 20, ''Net 30'', 8, ''TC4203'')
,(2,''7067'',''P2121'', ''6/15/92'', 20, ''Net 30'', 7, ''TC7777'')

');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec1c0f42-6907-4cdf-9a54-cbb8dd448bae' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00018_20190207_1343_INSERT_sales.sql", ID: {ec1c0f42-6907-4cdf-9a54-cbb8dd448bae} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec1c0f42-6907-4cdf-9a54-cbb8dd448bae' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ec1c0f42-6907-4cdf-9a54-cbb8dd448bae' AS UNIQUEIDENTIFIER), '33596D575160739415240881B5BD5D9ED0697E0B34777B0D44F5AF1A11A6E8C3', 'Migrations\1.0.0\00018_20190207_1343_INSERT_sales.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00019_20190207_1345_INSERT_royalty.sql", ID: {26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00019_20190207_1345_INSERT_royalty.sql", ID: {26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/
INSERT INTO dbo.royalty(title_id,title_code,lorange,hirange,royalty)
values(2,''BU1032'', 0, 5000, 10)
,(2,''BU1032'', 5001, 50000, 12)
,(9,''PC1035'', 0, 2000, 10)
,(9,''PC1035'', 2001, 3000, 12)
,(9,''PC1035'', 3001, 4000, 14)
,(9,''PC1035'', 4001, 10000, 16)
,(9,''PC1035'', 10001, 50000, 18)
,(10,''BU2075'', 0, 1000, 10)
,(10,''BU2075'', 1001, 3000, 12)
,(10,''BU2075'', 3001, 5000, 14)
,(10,''BU2075'', 5001, 7000, 16)
,(10,''BU2075'', 7001, 10000, 18)
,(10,''BU2075'', 10001, 12000, 20)
,(10,''BU2075'', 12001, 14000, 22)
,(10,''BU2075'', 14001, 50000, 24)
,(11,''PS2091'', 0, 1000, 10)
,(11,''PS2091'', 1001, 5000, 12)
,(11,''PS2091'', 5001, 10000, 14)
,(11,''PS2091'', 10001, 50000, 16)
,(12,''PS2106'', 0, 2000, 10)
,(12,''PS2106'', 2001, 5000, 12)
,(12,''PS2106'', 5001, 10000, 14)
,(12,''PS2106'', 10001, 50000, 16)
,(13,''MC3021'', 0, 1000, 10)
,(13,''MC3021'', 1001, 2000, 12)
,(13,''MC3021'', 2001, 4000, 14)
,(13,''MC3021'', 4001, 6000, 16)
,(13,''MC3021'', 6001, 8000, 18)
,(13,''MC3021'', 8001, 10000, 20)
,(13,''MC3021'', 10001, 12000, 22)
,(13,''MC3021'', 12001, 50000, 24)
,(14, ''TC3218'', 0, 2000, 10)
,(14, ''TC3218'', 2001, 4000, 12)
,(14, ''TC3218'', 4001, 6000, 14)
,(14, ''TC3218'', 6001, 8000, 16)
,(14, ''TC3218'', 8001, 10000, 18)
,(14, ''TC3218'', 10001, 12000, 20)
,(14, ''TC3218'', 12001, 14000, 22)
,(14, ''TC3218'', 14001, 50000, 24)
,(1,''PC8888'', 0, 5000, 10)
,(1,''PC8888'', 5001, 10000, 12)
,(1,''PC8888'', 10001, 15000, 14)
,(1,''PC8888'', 15001, 50000, 16)
,(3,''PS7777'', 0, 5000, 10)
,(3,''PS7777'', 5001, 50000, 12)
,(4,''PS3333'', 0, 5000, 10)
,(4,''PS3333'', 5001, 10000, 12)
,(4,''PS3333'', 10001, 15000, 14)
,(4,''PS3333'', 15001, 50000, 16)
,(5, ''BU1111'', 0, 4000, 10)
,(5,''BU1111'', 4001, 8000, 12)
,(5,''BU1111'', 8001, 10000, 14)
,(5,''BU1111'', 12001, 16000, 16)
,(5,''BU1111'', 16001, 20000, 18)
,(5,''BU1111'', 20001, 24000, 20)
,(5,''BU1111'', 24001, 28000, 22)
,(5,''BU1111'', 28001, 50000, 24)
,(6,''MC2222'', 0, 2000, 10)
,(6,''MC2222'', 2001, 4000, 12)
,(6,''MC2222'', 4001, 8000, 14)
,(6,''MC2222'', 8001, 12000, 16)
,(6,''MC2222'', 12001, 20000, 18)
,(6,''MC2222'', 20001, 50000, 20)
,(7, ''TC7777'', 0, 5000, 10)
,(7, ''TC7777'', 5001, 15000, 12)
,(7, ''TC7777'', 15001, 50000, 14)
,(8, ''TC4203'', 0, 2000, 10)
,(8, ''TC4203'', 2001, 8000, 12)
,(8, ''TC4203'', 8001, 16000, 14)
,(8, ''TC4203'', 16001, 24000, 16)
,(8, ''TC4203'', 24001, 32000, 18)
,(8, ''TC4203'', 32001, 40000, 20)
,(8, ''TC4203'', 40001, 50000, 22)
,(16,''BU7832'', 0, 5000, 10)
,(16,''BU7832'', 5001, 10000, 12)
,(16,''BU7832'', 10001, 15000, 14)
,(16,''BU7832'', 15001, 20000, 16)
,(16,''BU7832'', 20001, 25000, 18)
,(16,''BU7832'', 25001, 30000, 20)
,(16,''BU7832'', 30001, 35000, 22)
,(16,''BU7832'', 35001, 50000, 24)
,(17,''PS1372'', 0, 10000, 10)
,(17,''PS1372'', 10001, 20000, 12)
,(17,''PS1372'', 20001, 30000, 14)
,(17,''PS1372'', 30001, 40000, 16)
,(17,''PS1372'', 40001, 50000, 18)
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00019_20190207_1345_INSERT_royalty.sql", ID: {26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('26ebe4dd-e60a-44be-b1a2-42e5c9f9e41e' AS UNIQUEIDENTIFIER), 'AF76D744E62BEBF9277CDE6474603F5A889F2D6CF3CA05E55D37F10A5C115597', 'Migrations\1.0.0\00019_20190207_1345_INSERT_royalty.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4627f71c-c0d9-4a81-bd87-de7706065ea0' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00020_20190207_1500_INSERT_discounts.sql", ID: {4627f71c-c0d9-4a81-bd87-de7706065ea0} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4627f71c-c0d9-4a81-bd87-de7706065ea0' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00020_20190207_1500_INSERT_discounts.sql", ID: {4627f71c-c0d9-4a81-bd87-de7706065ea0} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/
INSERT dbo.discounts(discount_type,store_id,store_code,low_qty,high_qty,discount)
VALUES (''Initial Customer'', 2, ''7067'', 0, 1000, 10.5)
,(''Volume Discount'', 1, ''7066'', 100, 1000, 6.7)
,(''Customer Discount'', 4, ''8042'', NULL, NULL, 5.0)
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4627f71c-c0d9-4a81-bd87-de7706065ea0' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00020_20190207_1500_INSERT_discounts.sql", ID: {4627f71c-c0d9-4a81-bd87-de7706065ea0} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4627f71c-c0d9-4a81-bd87-de7706065ea0' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4627f71c-c0d9-4a81-bd87-de7706065ea0' AS UNIQUEIDENTIFIER), '68FC01A9B7737EB12136A20B4408E4326B4E28D320D81E534833AA31F330E494', 'Migrations\1.0.0\00020_20190207_1500_INSERT_discounts.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f312aa36-80e9-42b0-b900-d68c17199761' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00021_20190207_1948_INSERT_jobs.sql", ID: {f312aa36-80e9-42b0-b900-d68c17199761} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f312aa36-80e9-42b0-b900-d68c17199761' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00021_20190207_1948_INSERT_jobs.sql", ID: {f312aa36-80e9-42b0-b900-d68c17199761} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/
SET IDENTITY_INSERT dbo.jobs  ON; 
INSERT dbo.jobs (job_id,job_desc,min_lvl,max_lvl)
VALUES (1, ''New Hire - Job not specified'', 10, 10)
,(2, ''Chief Executive Officer'', 200, 250)
,(3, ''Business Operations Manager'', 175, 225)
,(4, ''Chief Financial Officier'', 175, 250)
,(5, ''Publisher'', 150, 250)
,(6, ''Managing Editor'', 140, 225)
,(7, ''Marketing Manager'', 120, 200)
,(8, ''Public Relations Manager'', 100, 175)
,(9, ''Acquisitions Manager'', 75, 175)
,(10, ''Productions Manager'', 75, 165)
,(11, ''Operations Manager'', 75, 150)
,(12,''Editor'', 25, 100)
,(13, ''Sales Representative'', 25, 100)
,(14, ''Designer'', 25, 100)
SET IDENTITY_INSERT dbo.jobs  OFF');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f312aa36-80e9-42b0-b900-d68c17199761' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00021_20190207_1948_INSERT_jobs.sql", ID: {f312aa36-80e9-42b0-b900-d68c17199761} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f312aa36-80e9-42b0-b900-d68c17199761' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f312aa36-80e9-42b0-b900-d68c17199761' AS UNIQUEIDENTIFIER), '23E7A8480FD793BB8D706AC42BD31B51F1A1601A4B6D7BB1977CFDE44A54CBFF', 'Migrations\1.0.0\00021_20190207_1948_INSERT_jobs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b2e65791-0fff-4079-b120-d517724d0a3d' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00022_20190207_1949_INSERT_employees.sql", ID: {b2e65791-0fff-4079-b120-d517724d0a3d} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b2e65791-0fff-4079-b120-d517724d0a3d' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00022_20190207_1949_INSERT_employees.sql", ID: {b2e65791-0fff-4079-b120-d517724d0a3d} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.07
** CREATION:     Load data into pubs tables
**************************************************************************/
INSERT INTO dbo.employees(employee_code,first_name,middle_name,last_name,job_id,job_lvl,publisher_id,publisher_code,hire_date)
VALUES (''PTC11962M'', ''Philip'', ''T'', ''Cramer'', 2, 215,4, ''9952'', ''11/11/89'')
,(''AMD15433F'', ''Ann'', ''M'', ''Devon'', 3, 200,4, ''9952'', ''07/16/91'')
,(''F-C16315M'', ''Francisco'', '''', ''Chang'', 4, 227,4, ''9952'', ''11/03/90'')
,(''LAL21447M'', ''Laurence'', ''A'', ''Lebihan'', 5, 175,1, ''0736'', ''06/03/90'')
,(''PXH22250M'', ''Paul'', ''X'', ''Henriot'', 5, 159, 2,''0877'', ''08/19/93'')
,(''SKO22412M'', ''Sven'', ''K'', ''Ottlieb'', 5, 150, 3,''1389'', ''04/05/91'')
,(''RBM23061F'', ''Rita'', ''B'', ''Muller'', 5, 198, 5,''1622'', ''10/09/93'')
,(''MJP25939M'', ''Maria'', ''J'', ''Pontes'', 5, 246, 6,''1756'', ''03/01/89'')
,(''JYL26161F'', ''Janine'', ''Y'', ''Labrune'', 5, 172, 7,''9901'', ''05/26/91'')
,(''CFH28514M'', ''Carlos'', ''F'', ''Hernadez'', 5, 211, 8,''9999'', ''04/21/89'')
,(''VPA30890F'', ''Victoria'', ''P'', ''Ashworth'', 6, 140, 2,''0877'', ''09/13/90'')
,(''L-B31947F'', ''Lesley'', '''', ''Brown'', 7, 120, 2,''0877'', ''02/13/91'')
,(''ARD36773F'', ''Anabela'', ''R'', ''Domingues'', 8, 100, 2,''0877'', ''01/27/93'')
,(''M-R38834F'', ''Martine'', '''', ''Rance'', 9, 75, 2,''0877'', ''02/05/92'')
,(''PHF38899M'', ''Peter'', ''H'', ''Franken'', 10, 75, 2,''0877'', ''05/17/92'')
,(''DBT39435M'', ''Daniel'', ''B'', ''Tonini'', 11, 75, 2,''0877'', ''01/01/90'')
,(''H-B39728F'', ''Helen'', '''', ''Bennett'', 12, 35, 2,''0877'', ''09/21/89'')
,(''PMA42628M'', ''Paolo'', ''M'', ''Accorti'', 13, 35, 2,''0877'', ''08/27/92'')
,(''ENL44273F'', ''Elizabeth'', ''N'', ''Lincoln'', 14, 35, 2,''0877'', ''07/24/90'')
,(''MGK44605M'', ''Matti'', ''G'', ''Karttunen'', 6, 220,1, ''0736'', ''05/01/94'')
,(''PDI47470M'', ''Palle'', ''D'', ''Ibsen'', 7, 195,1, ''0736'', ''05/09/93'')
,(''MMS49649F'', ''Mary'', ''M'', ''Saveley'', 8, 175,1, ''0736'', ''06/29/93'')
,(''GHT50241M'', ''Gary'', ''H'', ''Thomas'', 9, 170,1, ''0736'', ''08/09/88'')
,(''MFS52347M'', ''Martin'', ''F'', ''Sommer'', 10, 165,1, ''0736'', ''04/13/90'')
,(''R-M53550M'', ''Roland'', '''', ''Mendel'', 11, 150,1, ''0736'', ''09/05/91'')
,(''HAS54740M'', ''Howard'', ''A'', ''Snyder'', 12, 100,1, ''0736'', ''11/19/88'')
,(''TPO55093M'', ''Timothy'', ''P'', ''O''''Rourke'', 13, 100,1, ''0736'', ''06/19/88'')
,(''KFJ64308F'', ''Karin'', ''F'', ''Josephs'', 14, 100, 1,''0736'', ''10/17/92'')
,(''DWR65030M'', ''Diego'', ''W'', ''Roel'', 6, 192, 3,''1389'', ''12/16/91'')
,(''M-L67958F'', ''Maria'', '''', ''Larsson'', 7, 135, 3,''1389'', ''03/27/92'')
,(''PSP68661F'', ''Paula'', ''S'', ''Parente'', 8, 125, 3,''1389'', ''01/19/94'')
,(''MAS70474F'', ''Margaret'', ''A'', ''Smith'', 9, 78, 3,''1389'', ''09/29/88'')
,(''A-C71970F'', ''Aria'', '''', ''Cruz'', 10, 87, 3,''1389'', ''10/26/91'')
,(''MAP77183M'', ''Miguel'', ''A'', ''Paolino'', 11, 112,3, ''1389'', ''12/07/92'')
,(''Y-L77953M'', ''Yoshi'', '''', ''Latimer'', 12, 32, 3,''1389'', ''06/11/89'')
,(''CGS88322F'', ''Carine'', ''G'', ''Schmitt'', 13, 64, 3,''1389'', ''07/07/92'')
,(''PSA89086M'', ''Pedro'', ''S'', ''Afonso'', 14, 89, 3,''1389'', ''12/24/90'')
,(''A-R89858F'', ''Annette'', '''', ''Roulet'', 6, 152, 8,''9999'', ''02/21/90'')
,(''HAN90777M'', ''Helvetius'', ''A'', ''Nagy'', 7, 120, 8,''9999'', ''03/19/93'')
,(''M-P91209M'', ''Manuel'', '''', ''Pereira'', 8, 101, 8,''9999'', ''01/09/89'')
,(''KJJ92907F'', ''Karla'', ''J'', ''Jablonski'', 9, 170, 8,''9999'', ''03/11/94'')
,(''POK93028M'', ''Pirkko'', ''O'', ''Koskitalo'', 10, 80, 8,''9999'', ''11/29/93'')
,(''PCM98509F'', ''Patricia'', ''C'', ''McKenna'', 11, 150, 8,''9999'', ''08/01/89'')
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b2e65791-0fff-4079-b120-d517724d0a3d' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00022_20190207_1949_INSERT_employees.sql", ID: {b2e65791-0fff-4079-b120-d517724d0a3d} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b2e65791-0fff-4079-b120-d517724d0a3d' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('b2e65791-0fff-4079-b120-d517724d0a3d' AS UNIQUEIDENTIFIER), '8BFF08B3E618B78A1022FAA126BD6DA1FB969B8FD91EC60B93995C1E8071B6CE', 'Migrations\1.0.0\00022_20190207_1949_INSERT_employees.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\00023_20190207_1952_CREATE_CONSTRAINTS.sql", ID: {5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0\00023_20190207_1952_CREATE_CONSTRAINTS.sql", ID: {5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('/**************************************************************************
** CREATED BY:   Mick Letofsky
** CREATED DATE: 2019.02.06
** CREATION:     Add indexes & constraints
**************************************************************************/
CREATE NONCLUSTERED INDEX IX_authors_names ON dbo.authors (last_name, first_name) WITH (DATA_COMPRESSION=PAGE);
CREATE NONCLUSTERED INDEX IX_titles_title ON dbo.titles (title) WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.titles ADD CONSTRAINT FK_titles_publisher_id FOREIGN KEY (publisher_id) REFERENCES dbo.publishers (publisher_id);
CREATE NONCLUSTERED INDEX IX_titles_publisher_id ON dbo.titles (publisher_id) WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.sales ADD CONSTRAINT FK_sales_stores FOREIGN KEY (store_id) REFERENCES dbo.stores (store_id);
CREATE NONCLUSTERED INDEX IX_sales_store_id ON dbo.sales (store_id) WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.sales ADD CONSTRAINT FK_sales_titles FOREIGN KEY (title_id) REFERENCES dbo.titles (title_id);
CREATE NONCLUSTERED INDEX IX_sales_title_id ON dbo.sales (title_id) WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.royalty ADD CONSTRAINT FK_royalty_titles FOREIGN KEY (title_id) REFERENCES dbo.titles (title_id);
CREATE NONCLUSTERED INDEX IX_royalty_title_id ON dbo.royalty (title_id) WITH (DATA_COMPRESSION = PAGE);

ALTER TABLE dbo.titles_xref_authors ADD CONSTRAINT FK_title_xref_author_titles FOREIGN KEY (title_id) REFERENCES dbo.titles (title_id)
CREATE NONCLUSTERED INDEX IX_titles_xref_authors_title_id ON dbo.titles_xref_authors (title_id) WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.titles_xref_authors ADD CONSTRAINT FK_title_xref_author_authors FOREIGN KEY (author_id) REFERENCES dbo.authors (author_id);
CREATE NONCLUSTERED INDEX IX_titles_xref_authors_author_id ON dbo.titles_xref_authors (author_id) WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.discounts ADD CONSTRAINT FK_discounts_stores FOREIGN KEY (store_id) REFERENCES dbo.stores (store_id)
CREATE NONCLUSTERED INDEX IX_discounts_store_id ON dbo.discounts (store_id) WITH (DATA_COMPRESSION=PAGE);

ALTER TABLE dbo.publisher_info ADD CONSTRAINT FK_publisher_info_publishers FOREIGN KEY (publisher_id) REFERENCES publishers (publisher_id) ;

ALTER TABLE dbo.employees ADD CONSTRAINT FK_employees_publishers FOREIGN KEY (publisher_id) REFERENCES dbo.publishers (publisher_id)
CREATE NONCLUSTERED INDEX IX_employee_publisher_id ON dbo.employees (publisher_id) WITH (DATA_COMPRESSION=PAGE);

UPDATE STATISTICS dbo.publishers;
UPDATE STATISTICS dbo.employees;
UPDATE STATISTICS dbo.jobs;
UPDATE STATISTICS dbo.publisher_info;
UPDATE STATISTICS dbo.titles;
UPDATE STATISTICS dbo.authors;
UPDATE STATISTICS dbo.titles_xref_authors;
UPDATE STATISTICS dbo.sales;
UPDATE STATISTICS dbo.royalty;
UPDATE STATISTICS dbo.stores;
UPDATE STATISTICS dbo.discounts;
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\00023_20190207_1952_CREATE_CONSTRAINTS.sql", ID: {5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('5d2bb38e-3bfb-4588-b63c-9aaa91b4ee0c' AS UNIQUEIDENTIFIER), '450D36F2D3A23E028D517067CAEF5ABE1224B58554A786FCB4DEB5F39BDA6C1B', 'Migrations\1.0.0\00023_20190207_1952_CREATE_CONSTRAINTS.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a7da7766-d21e-4ea2-9125-6a255d77ea1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '42B39904E7F87BAEF29ECA92A8B2425CDCEB21B95276F772922A9DEC38514CA4')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Triggers\employee_insupd.sql", ID: {a7da7766-d21e-4ea2-9125-6a255d77ea1b} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a7da7766-d21e-4ea2-9125-6a255d77ea1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '42B39904E7F87BAEF29ECA92A8B2425CDCEB21B95276F772922A9DEC38514CA4')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Triggers\employee_insupd.sql", ID: {a7da7766-d21e-4ea2-9125-6a255d77ea1b} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('CREATE OR ALTER TRIGGER dbo.employees_insupd
ON employees
FOR INSERT, UPDATE
AS
--Get the range of level for this job type from the jobs table.
DECLARE @min_lvl TINYINT
        ,@max_lvl TINYINT
        ,@emp_lvl TINYINT
        ,@job_id INTEGER;

SELECT  @min_lvl = min_lvl
        ,@max_lvl = max_lvl
        ,@emp_lvl = i.job_lvl
        ,@job_id = i.job_id

FROM    dbo.employees e
        INNER JOIN inserted i ON e.employee_id = i.employee_id
		INNER JOIN dbo.jobs j ON i.job_id = j.job_id;


IF (@job_id = 1)
   AND  (@emp_lvl <> 10)
BEGIN
    RAISERROR(''Job id 1 expects the default level of 10.'', 16, 1);
    ROLLBACK TRANSACTION;
END;
ELSE IF NOT (@emp_lvl
        BETWEEN @min_lvl AND @max_lvl
            )
BEGIN
    RAISERROR(''The level for job_id:%d should be between %d and %d.'', 16, 1, @job_id, @min_lvl, @max_lvl);
    ROLLBACK TRANSACTION;
END;

');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a7da7766-d21e-4ea2-9125-6a255d77ea1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '42B39904E7F87BAEF29ECA92A8B2425CDCEB21B95276F772922A9DEC38514CA4')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Triggers\employee_insupd.sql", ID: {a7da7766-d21e-4ea2-9125-6a255d77ea1b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a7da7766-d21e-4ea2-9125-6a255d77ea1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '42B39904E7F87BAEF29ECA92A8B2425CDCEB21B95276F772922A9DEC38514CA4')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a7da7766-d21e-4ea2-9125-6a255d77ea1b' AS UNIQUEIDENTIFIER), '42B39904E7F87BAEF29ECA92A8B2425CDCEB21B95276F772922A9DEC38514CA4', 'Programmable Objects\dbo\Triggers\employee_insupd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('47eb0ac8-2a9b-4642-adb7-04ae437acaa5' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6F15941101E767BFAC5648276EBCEC4C5EDA4C6F5D70430617F0FB84F08B478E')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Views\vw_titles.sql", ID: {47eb0ac8-2a9b-4642-adb7-04ae437acaa5} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('47eb0ac8-2a9b-4642-adb7-04ae437acaa5' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6F15941101E767BFAC5648276EBCEC4C5EDA4C6F5D70430617F0FB84F08B478E')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Views\vw_titles.sql", ID: {47eb0ac8-2a9b-4642-adb7-04ae437acaa5} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('CREATE OR ALTER VIEW vw_titles
AS
SELECT  t.title
        ,xref.author_order
        ,a.last_name
        ,t.price
        ,t.year_to_date_sales
        ,t.publisher_id

FROM    dbo.authors a
        INNER JOIN dbo.titles_xref_authors xref ON xref.author_id = a.author_id
		INNER JOIN dbo.titles t ON t.title_id = xref.title_id
        


');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('47eb0ac8-2a9b-4642-adb7-04ae437acaa5' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6F15941101E767BFAC5648276EBCEC4C5EDA4C6F5D70430617F0FB84F08B478E')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Views\vw_titles.sql", ID: {47eb0ac8-2a9b-4642-adb7-04ae437acaa5} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('47eb0ac8-2a9b-4642-adb7-04ae437acaa5' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6F15941101E767BFAC5648276EBCEC4C5EDA4C6F5D70430617F0FB84F08B478E')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('47eb0ac8-2a9b-4642-adb7-04ae437acaa5' AS UNIQUEIDENTIFIER), '6F15941101E767BFAC5648276EBCEC4C5EDA4C6F5D70430617F0FB84F08B478E', 'Programmable Objects\dbo\Views\vw_titles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';
GO

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO


IF SERVERPROPERTY('EngineEdition') != 5 AND HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
  DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
  SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
  SET @eventMessage = N'Redgate SQL Change Automation: { "deployment": { "description": "Redgate SQL Change Automation deployed $(ReleaseVersion) to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
  EXECUTE sys.xp_logevent 55000, @eventMessage
END
PRINT 'Deployment completed successfully.'
GO




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
